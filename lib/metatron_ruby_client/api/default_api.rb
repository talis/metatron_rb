=begin
production-metatron-api

OpenAPI spec version: 2016-07-15T09:42:29Z

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require "uri"

module MetatronClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # 
    # @param asset_id 
    # @param asset_type 
    # @param authorization 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def assets_asset_type_asset_id_delete(asset_id, asset_type, authorization, opts = {})
      assets_asset_type_asset_id_delete_with_http_info(asset_id, asset_type, authorization, opts)
      return nil
    end

    # 
    # 
    # @param asset_id 
    # @param asset_type 
    # @param authorization 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def assets_asset_type_asset_id_delete_with_http_info(asset_id, asset_type, authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.assets_asset_type_asset_id_delete ..."
      end
      # verify the required parameter 'asset_id' is set
      fail ArgumentError, "Missing the required parameter 'asset_id' when calling DefaultApi.assets_asset_type_asset_id_delete" if asset_id.nil?
      # verify the required parameter 'asset_type' is set
      fail ArgumentError, "Missing the required parameter 'asset_type' when calling DefaultApi.assets_asset_type_asset_id_delete" if asset_type.nil?
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.assets_asset_type_asset_id_delete" if authorization.nil?
      # resource path
      local_var_path = "/2/assets/{assetType}/{assetId}".sub('{format}','json').sub('{' + 'assetId' + '}', asset_id.to_s).sub('{' + 'assetType' + '}', asset_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/vnd.api+json', 'application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = ['Authorizer']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#assets_asset_type_asset_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param authorization 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :work_id 
    # @option opts [String] :isbn 
    # @return [ManifestationResultSet]
    def manifestations_get(authorization, opts = {})
      data, _status_code, _headers = manifestations_get_with_http_info(authorization, opts)
      return data
    end

    # 
    # 
    # @param authorization 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :work_id 
    # @option opts [String] :isbn 
    # @return [Array<(ManifestationResultSet, Fixnum, Hash)>] ManifestationResultSet data, response status code and response headers
    def manifestations_get_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.manifestations_get ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.manifestations_get" if authorization.nil?
      # resource path
      local_var_path = "/2/manifestations".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'work_id'] = opts[:'work_id'] if opts[:'work_id']
      query_params[:'isbn'] = opts[:'isbn'] if opts[:'isbn']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/vnd.api+json', 'application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = ['Authorizer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ManifestationResultSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#manifestations_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param manifestation_id 
    # @param authorization 
    # @param [Hash] opts the optional parameters
    # @return [AssetResultSet]
    def manifestations_manifestation_id_assets_get(manifestation_id, authorization, opts = {})
      data, _status_code, _headers = manifestations_manifestation_id_assets_get_with_http_info(manifestation_id, authorization, opts)
      return data
    end

    # 
    # 
    # @param manifestation_id 
    # @param authorization 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AssetResultSet, Fixnum, Hash)>] AssetResultSet data, response status code and response headers
    def manifestations_manifestation_id_assets_get_with_http_info(manifestation_id, authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.manifestations_manifestation_id_assets_get ..."
      end
      # verify the required parameter 'manifestation_id' is set
      fail ArgumentError, "Missing the required parameter 'manifestation_id' when calling DefaultApi.manifestations_manifestation_id_assets_get" if manifestation_id.nil?
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.manifestations_manifestation_id_assets_get" if authorization.nil?
      # resource path
      local_var_path = "/2/manifestations/{manifestationId}/assets".sub('{format}','json').sub('{' + 'manifestationId' + '}', manifestation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/vnd.api+json', 'application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = ['Authorizer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AssetResultSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#manifestations_manifestation_id_assets_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param manifestation_id 
    # @param authorization 
    # @param asset 
    # @param [Hash] opts the optional parameters
    # @return [Asset]
    def manifestations_manifestation_id_assets_post(manifestation_id, authorization, asset, opts = {})
      data, _status_code, _headers = manifestations_manifestation_id_assets_post_with_http_info(manifestation_id, authorization, asset, opts)
      return data
    end

    # 
    # 
    # @param manifestation_id 
    # @param authorization 
    # @param asset 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Asset, Fixnum, Hash)>] Asset data, response status code and response headers
    def manifestations_manifestation_id_assets_post_with_http_info(manifestation_id, authorization, asset, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.manifestations_manifestation_id_assets_post ..."
      end
      # verify the required parameter 'manifestation_id' is set
      fail ArgumentError, "Missing the required parameter 'manifestation_id' when calling DefaultApi.manifestations_manifestation_id_assets_post" if manifestation_id.nil?
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.manifestations_manifestation_id_assets_post" if authorization.nil?
      # verify the required parameter 'asset' is set
      fail ArgumentError, "Missing the required parameter 'asset' when calling DefaultApi.manifestations_manifestation_id_assets_post" if asset.nil?
      # resource path
      local_var_path = "/2/manifestations/{manifestationId}/assets".sub('{format}','json').sub('{' + 'manifestationId' + '}', manifestation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/vnd.api+json', 'application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/vnd.api+json', 'application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(asset)
      auth_names = ['Authorizer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Asset')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#manifestations_manifestation_id_assets_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param manifestation_id 
    # @param authorization 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def manifestations_manifestation_id_get(manifestation_id, authorization, opts = {})
      manifestations_manifestation_id_get_with_http_info(manifestation_id, authorization, opts)
      return nil
    end

    # 
    # 
    # @param manifestation_id 
    # @param authorization 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def manifestations_manifestation_id_get_with_http_info(manifestation_id, authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.manifestations_manifestation_id_get ..."
      end
      # verify the required parameter 'manifestation_id' is set
      fail ArgumentError, "Missing the required parameter 'manifestation_id' when calling DefaultApi.manifestations_manifestation_id_get" if manifestation_id.nil?
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.manifestations_manifestation_id_get" if authorization.nil?
      # resource path
      local_var_path = "/2/manifestations/{manifestationId}".sub('{format}','json').sub('{' + 'manifestationId' + '}', manifestation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/vnd.api+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = ['Authorizer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#manifestations_manifestation_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param manifestation_id 
    # @param authorization 
    # @param tenant_code 
    # @param [Hash] opts the optional parameters
    # @return [ItemResultSet]
    def manifestations_manifestation_id_items_tenant_code_get(manifestation_id, authorization, tenant_code, opts = {})
      data, _status_code, _headers = manifestations_manifestation_id_items_tenant_code_get_with_http_info(manifestation_id, authorization, tenant_code, opts)
      return data
    end

    # 
    # 
    # @param manifestation_id 
    # @param authorization 
    # @param tenant_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ItemResultSet, Fixnum, Hash)>] ItemResultSet data, response status code and response headers
    def manifestations_manifestation_id_items_tenant_code_get_with_http_info(manifestation_id, authorization, tenant_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.manifestations_manifestation_id_items_tenant_code_get ..."
      end
      # verify the required parameter 'manifestation_id' is set
      fail ArgumentError, "Missing the required parameter 'manifestation_id' when calling DefaultApi.manifestations_manifestation_id_items_tenant_code_get" if manifestation_id.nil?
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.manifestations_manifestation_id_items_tenant_code_get" if authorization.nil?
      # verify the required parameter 'tenant_code' is set
      fail ArgumentError, "Missing the required parameter 'tenant_code' when calling DefaultApi.manifestations_manifestation_id_items_tenant_code_get" if tenant_code.nil?
      # resource path
      local_var_path = "/2/manifestations/{manifestationId}/items/{tenantCode}".sub('{format}','json').sub('{' + 'manifestationId' + '}', manifestation_id.to_s).sub('{' + 'tenantCode' + '}', tenant_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/vnd.api+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = ['Authorizer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ItemResultSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#manifestations_manifestation_id_items_tenant_code_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param manifestation_id 
    # @param authorization 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def manifestations_manifestation_id_works_get(manifestation_id, authorization, opts = {})
      manifestations_manifestation_id_works_get_with_http_info(manifestation_id, authorization, opts)
      return nil
    end

    # 
    # 
    # @param manifestation_id 
    # @param authorization 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def manifestations_manifestation_id_works_get_with_http_info(manifestation_id, authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.manifestations_manifestation_id_works_get ..."
      end
      # verify the required parameter 'manifestation_id' is set
      fail ArgumentError, "Missing the required parameter 'manifestation_id' when calling DefaultApi.manifestations_manifestation_id_works_get" if manifestation_id.nil?
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.manifestations_manifestation_id_works_get" if authorization.nil?
      # resource path
      local_var_path = "/2/manifestations/{manifestationId}/works".sub('{format}','json').sub('{' + 'manifestationId' + '}', manifestation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/vnd.api+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = ['Authorizer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#manifestations_manifestation_id_works_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param limit 
    # @param offset 
    # @param q 
    # @param authorization 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include 
    # @return [WorkResultSet]
    def works_get(limit, offset, q, authorization, opts = {})
      data, _status_code, _headers = works_get_with_http_info(limit, offset, q, authorization, opts)
      return data
    end

    # 
    # 
    # @param limit 
    # @param offset 
    # @param q 
    # @param authorization 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include 
    # @return [Array<(WorkResultSet, Fixnum, Hash)>] WorkResultSet data, response status code and response headers
    def works_get_with_http_info(limit, offset, q, authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.works_get ..."
      end
      # verify the required parameter 'limit' is set
      fail ArgumentError, "Missing the required parameter 'limit' when calling DefaultApi.works_get" if limit.nil?
      # verify the required parameter 'offset' is set
      fail ArgumentError, "Missing the required parameter 'offset' when calling DefaultApi.works_get" if offset.nil?
      # verify the required parameter 'q' is set
      fail ArgumentError, "Missing the required parameter 'q' when calling DefaultApi.works_get" if q.nil?
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.works_get" if authorization.nil?
      # resource path
      local_var_path = "/2/works".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'limit'] = limit
      query_params[:'offset'] = offset
      query_params[:'q'] = q
      query_params[:'include'] = opts[:'include'] if opts[:'include']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/vnd.api+json', 'application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = ['Authorizer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WorkResultSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#works_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param work_id 
    # @param authorization 
    # @param [Hash] opts the optional parameters
    # @return [AssetResultSet]
    def works_work_id_assets_get(work_id, authorization, opts = {})
      data, _status_code, _headers = works_work_id_assets_get_with_http_info(work_id, authorization, opts)
      return data
    end

    # 
    # 
    # @param work_id 
    # @param authorization 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AssetResultSet, Fixnum, Hash)>] AssetResultSet data, response status code and response headers
    def works_work_id_assets_get_with_http_info(work_id, authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.works_work_id_assets_get ..."
      end
      # verify the required parameter 'work_id' is set
      fail ArgumentError, "Missing the required parameter 'work_id' when calling DefaultApi.works_work_id_assets_get" if work_id.nil?
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.works_work_id_assets_get" if authorization.nil?
      # resource path
      local_var_path = "/2/works/{workId}/assets".sub('{format}','json').sub('{' + 'workId' + '}', work_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/vnd.api+json', 'application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = ['Authorizer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AssetResultSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#works_work_id_assets_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param work_id 
    # @param authorization 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def works_work_id_manifestations_get(work_id, authorization, opts = {})
      works_work_id_manifestations_get_with_http_info(work_id, authorization, opts)
      return nil
    end

    # 
    # 
    # @param work_id 
    # @param authorization 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def works_work_id_manifestations_get_with_http_info(work_id, authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.works_work_id_manifestations_get ..."
      end
      # verify the required parameter 'work_id' is set
      fail ArgumentError, "Missing the required parameter 'work_id' when calling DefaultApi.works_work_id_manifestations_get" if work_id.nil?
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.works_work_id_manifestations_get" if authorization.nil?
      # resource path
      local_var_path = "/2/works/{workId}/manifestations".sub('{format}','json').sub('{' + 'workId' + '}', work_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/vnd.api+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = ['Authorizer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#works_work_id_manifestations_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param work_id 
    # @param authorization 
    # @param [Hash] opts the optional parameters
    # @return [WorkResultSet]
    def works_work_id_similar_get(work_id, authorization, opts = {})
      data, _status_code, _headers = works_work_id_similar_get_with_http_info(work_id, authorization, opts)
      return data
    end

    # 
    # 
    # @param work_id 
    # @param authorization 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorkResultSet, Fixnum, Hash)>] WorkResultSet data, response status code and response headers
    def works_work_id_similar_get_with_http_info(work_id, authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.works_work_id_similar_get ..."
      end
      # verify the required parameter 'work_id' is set
      fail ArgumentError, "Missing the required parameter 'work_id' when calling DefaultApi.works_work_id_similar_get" if work_id.nil?
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.works_work_id_similar_get" if authorization.nil?
      # resource path
      local_var_path = "/2/works/{workId}/similar".sub('{format}','json').sub('{' + 'workId' + '}', work_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/vnd.api+json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = ['Authorizer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WorkResultSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#works_work_id_similar_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
