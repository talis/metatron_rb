=begin
production-171103-metatron-api

OpenAPI spec version: 2017-12-04T14:42:17Z

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'spec_helper'
require 'json'

# Unit tests for MetatronClient::DefaultApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'DefaultApi' do
  before do
    # run before each test
    @instance = MetatronClient::DefaultApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of DefaultApi' do
    it 'should create an instact of DefaultApi' do
      @instance.should be_a(MetatronClient::DefaultApi)
    end
  end

  # unit tests for 2_assets_asset_type_asset_id_delete
  # 
  # 
  # @param asset_id 
  # @param asset_type 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe '2_assets_asset_type_asset_id_delete test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for 2_assets_asset_type_asset_id_get
  # 
  # 
  # @param asset_id 
  # @param asset_type 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe '2_assets_asset_type_asset_id_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for 2_assets_asset_type_asset_id_options
  # 
  # 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe '2_assets_asset_type_asset_id_options test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for 2_manifestations_get
  # 
  # 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe '2_manifestations_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for 2_manifestations_manifestation_id_assets_get
  # 
  # 
  # @param manifestation_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe '2_manifestations_manifestation_id_assets_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for 2_manifestations_manifestation_id_assets_options
  # 
  # 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe '2_manifestations_manifestation_id_assets_options test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for 2_manifestations_manifestation_id_assets_post
  # 
  # 
  # @param manifestation_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe '2_manifestations_manifestation_id_assets_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for 2_manifestations_options
  # 
  # 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe '2_manifestations_options test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for 2_works_get
  # 
  # 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe '2_works_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for 2_works_options
  # 
  # 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe '2_works_options test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for 2_works_work_id_assets_get
  # 
  # 
  # @param work_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe '2_works_work_id_assets_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for 2_works_work_id_assets_options
  # 
  # 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe '2_works_work_id_assets_options test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
